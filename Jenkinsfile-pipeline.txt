pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/omaimafadi/youtube-clone.git'
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('SonarQube-Server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Pipeline_CICD  \
                    -Dsonar.projectKey=Pipeline_CICD '''
                }
            }
        }
        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'SonarQube-Token'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage('TRIVY FS SCAN') {
             steps {
                 sh "trivy fs . > trivy-fs.txt"
             }
        }
        stage('Verification of Dockerfile with Hadolint') {
            steps {
                script {
                    def hadolintOutput = sh(script: 'hadolint /var/lib/jenkins/workspace/Pipeline_CICD/Dockerfile', returnStdout: true).trim()
                    if (hadolintOutput) {
                        echo "Hadolint detected issues in Dockerfile:\n${hadolintOutput}"
                        currentBuild.result = 'UNSTABLE'
                    } else {
                        echo "Hadolint found no issues in Dockerfile."
                    }
                }
            }
        }
         stage("Docker Build & Push"){
             steps{
                 script{
                   withDockerRegistry(credentialsId: 'dockerhub', toolName: 'docker'){   
                      sh "docker build -t youtube-application ."
                      sh "docker tag youtube-application fadi2000/youtube-application:latest "
                      sh "docker push fadi2000/youtube-application:latest "
                    }
                }
            }
        }
        stage("TRIVY Image Scan"){
            steps{
                sh "trivy image fadi2000/youtube-application:latest > trivy-image.txt" 
            }
        }
        stage ('OWASP Dependency-Check Vulnerabilities') {
            steps {
                dependencyCheck additionalArguments: '', odcInstallation: 'OWASP-Dependency-Check'
                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }
        stage('Verification of Docker image with Dockle') {
            steps {
                script {
                    // Ex√©cute Dockle sur l'image Docker
                    def dockleOutput = sh(script: 'dockle --timeout 1200s fadi2000/youtube-application:latest', 
                    returnStdout: true).trim() 
                    if (dockleOutput) {
                        echo "Dockle detected issues in Docker image:\n${dockleOutput}"
                        currentBuild.result = 'UNSTABLE'
                    } else {
                        echo "Dockle found no issues in Docker image."
                    }
                }
            }
        }
        stage('Deploy to Kubernets'){
            steps{
                script{
                    dir('Kubernetes') {
                      withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kubernetes', namespace: '', restrictKubeConfigAccess: false, serverUrl: ''){
                      sh 'kubectl apply -f deployment.yml'
                      sh 'kubectl apply -f service.yml'
                      }   
                    }
                }
            }
        }
    }
    post {
     always {
        emailext attachLog: true,
            subject: "'${currentBuild.result}'",
            body: "Project: ${env.JOB_NAME}<br/>" +
                "Build Number: ${env.BUILD_NUMBER}<br/>" +
                "URL: ${env.BUILD_URL}<br/>",
            to: 'omaimafadi2000@gmail.com',                              
            attachmentsPattern: 'trivy-fs.txt,trivy-image.txt,dependency-check-report.xml'
        }
    }
}